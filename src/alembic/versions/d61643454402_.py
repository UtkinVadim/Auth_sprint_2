"""empty message

Revision ID: d61643454402
Revises: 
Create Date: 2022-01-15 17:04:00.178404

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'd61643454402'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('role',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('title')
    )
    op.create_table('user_auth',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('login', sa.String(), nullable=False),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), nullable=False),
    sa.PrimaryKeyConstraint('id', 'is_active'),
    sa.UniqueConstraint('id', 'is_active', 'login'),
    postgresql_partition_by='LIST (is_active)'
    )
    op.execute("""CREATE TABLE IF NOT EXISTS "active_user" PARTITION OF "user_auth" FOR VALUES IN ('true')""")
    op.execute("""CREATE TABLE IF NOT EXISTS "inactive_user" PARTITION OF "user_auth" FOR VALUES IN ('false')""")
    op.create_table('login_history',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_is_active', sa.BOOLEAN(), nullable=True),
    sa.Column('fingerprint', sa.String(), nullable=True),
    sa.Column('event_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id', 'user_is_active'], ['user_auth.id', 'user_auth.is_active'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('social_account',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_is_active', sa.BOOLEAN(), nullable=True),
    sa.Column('social_id', sa.Text(), nullable=False),
    sa.Column('social_name', sa.Text(), nullable=False),
    sa.ForeignKeyConstraint(['user_id', 'user_is_active'], ['user_auth.id', 'user_auth.is_active'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('social_id', 'social_name', name='social_pk')
    )
    op.create_table('user_role',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_is_active', sa.BOOLEAN(), nullable=True),
    sa.Column('role_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
    sa.ForeignKeyConstraint(['user_id', 'user_is_active'], ['user_auth.id', 'user_auth.is_active'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('user_id', 'role_id', name='unique_user_role')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_role')
    op.drop_table('social_account')
    op.drop_table('login_history')
    op.drop_table('user_auth')
    op.drop_table('role')
    # ### end Alembic commands ###
